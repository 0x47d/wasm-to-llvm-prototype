%{
/*
// Copyright (c) 2015 Intel Corporation
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
*/

#include <iostream>
#include <string>
#include <stdio.h>
#include <limits>

#include "binop.h"
#include "debug.h"
#include "enums.h"
#include "export.h"
#include "expression.h"
#include "function.h"
#include "function_field.h"
#include "globals.h"
#include "local.h"
#include "memory.h"
#include "module.h"
#include "operation.h"
#include "simple.h"
#include "wasm_script.h"
#include "wasm_script_elem.h"
#include "wasm_file.h"

extern int yyerror (const std::string& s);
extern int yylex (void);

%}

%code requires {
  class CaseExpression;
  class CallExpression;
  class ConversionOperation;
  class Expression;
  enum ETYPE;
  class FunctionField;
  class Globals;
  class Load;
  class Local;
  class Operation;
  enum OPERATION;
  class Store;
  class ValueHolder;
  class Variable;
  class WasmExport;
  class WasmFile;
  class WasmFunction;
  class WasmModule;
  class WasmScript;
  class WasmScriptElem;

  struct LoopNaming {
    Variable* loop_name_;
    Variable* exit_name_;

    LoopNaming(Variable* loop_name = nullptr, Variable* exit_name = nullptr) :
      loop_name_(loop_name), exit_name_(exit_name) {
    }
  };

  class Case {
  };
}

%union {
  bool b;
  int64_t l;
  double d;
  char* string;
  void* voidptr;

  CaseExpression* ca;
  CallExpression* ce;
  ConversionOperation* co;
  WasmExport* e;
  ETYPE et;
  Expression* ex;
  WasmFunction* f;
  FunctionField* ff;
  Load* ld;
  LoopNaming* ln;
  Local* local;
  WasmModule* m;
  Operation* o;
  OPERATION op;
  Store* st;
  Variable* v;
  ValueHolder* vh;
  WasmScript* ws;
  WasmScriptElem* wse;
  WasmFile* wf;
}

%token BLOCK_TOKEN IF IF_ELSE LOOP BREAK_TOKEN GET_LOCAL SET_LOCAL
%token INTEGER STRING FLOAT
%token IDENTIFIER
%token MODULE_TOKEN
%token FUNCTION_TOKEN
%token RESULT_TOKEN
%token RETURN_TOKEN
%token EXPORT_TOKEN
%token PARAM_TOKEN
%token TYPE
%token NE EQ DIV ADD SUB MUL REM AND OR XOR SHL SHR CLZ CTZ POPCNT
%token SQRT MAX MIN CEIL FLOOR TRUNC NEAREST ABS NEG COPYSIGN
%token WRAP EXTEND CONVERT PROMOTE DEMOTE REINTERPRET
%token LE LT GE GT
%token ASSERT_RETURN_TOKEN
%token ASSERT_TRAP_TOKEN
%token ASSERT_INVALID_TOKEN
%token ASSERT_RETURN_NAN_TOKEN
%token INVOKE_TOKEN
%token CALL_TOKEN
%token LOCAL_TOKEN
%token CASE TABLE TABLE_SWITCH
%token UNREACHABLE_TOKEN
%token CONST
%token LABEL
%token MEMORY STORE LOAD

%type<voidptr> FUNCTION_FIELDS CASES LIST_CASES
%type<voidptr> EXPRESSIONS CASE CASE_TABLE

%type<b> SIGN
%type<ca> ONE_CASE
%type<ce> SCRIPT_INVOKE
%type<co> POTENTIAL_SIGNED_CONVERSION
%type<e> EXPORT
%type<et> TYPE
%type<ex> CALL BREAK BLOCK MEMORY_OPERATION SWITCH
%type<ex> EXPRESSION EXPRESSION_INNER EXPRESSION_OR_NOT
%type<f> FUNCTION
%type<ff> SIMPLE_FIELD FUNCTION_FIELD
%type<l> RESULT INTEGER
%type<ld> POTENTIAL_SIGNED_LOAD LOAD_POTENTIAL_SIZE
%type<ln> LOOP_NAMING
%type<local> TYPE_LIST PARAM LOCAL LOCAL_ELEMS
%type<m> MODULE MODULE_ELEMS
%type<o> BINOP UNOP
%type<o> POTENTIAL_SIGNED_BINOP POTENTIAL_SIGNED_UNOP POTENTIAL_SIGNED_TRUNC
%type<op> LOAD STORE
%type<op> BINOP_OPER UNOP_OPER
%type<op> NE EQ DIV ADD SUB MUL REM AND OR XOR SHL SHR CLZ CTZ POPCNT
%type<op> LE LT GE GT
%type<op> SQRT MAX MIN CEIL FLOOR TRUNC NEAREST ABS NEG COPYSIGN
%type<op> WRAP EXTEND CONVERT PROMOTE DEMOTE REINTERPRET CONVERSION
%type<st> POTENTIAL_SIGNED_STORE STORE_POTENTIAL_SIZE
%type<string> IDENTIFIER_OR_NOT IDENTIFIER STRING
%type<string> FLOAT
%type<v> VARIABLE_OR_NOT VARIABLE CASE_DEF
%type<vh> VALUE
%type<wse> ASSERT ASSERT_TRAP ASSERT_RETURN ASSERT_RETURN_NAN ASSERT_INVALID SCRIPT_ELEM
%type<wf> FILE

%%

START: FILE {
  Globals::Get()->SetWasmFile($1);
}

FILE:
  MODULE FILE {
    // Add the module to the file.
    WasmModule* module = $1;
    WasmFile* file = $2;
    file->AddModule(module);

    // Propagate this up.
    $$ = file;
  } |
  SCRIPT_ELEM FILE {
    // Add a script element.
    WasmScriptElem* wse = $1;
    WasmFile* file = $2;

    if (wse != nullptr) {
      // We want the file to know about the script request.
      file->AddScriptElem(wse);
    }

    // Propagate this up.
    $$ = file;
  } | {
    // Create the file now.
    WasmFile* file = new WasmFile();
    $$ = file;
  }

SCRIPT_INVOKE:
  '(' INVOKE_TOKEN STRING EXPRESSIONS ')' {
   char* name = $3;
   std::list<Expression*>* params = static_cast<std::list<Expression*>* >($4);

   Variable* var = new Variable(name);

   // Create the call.
   CallExpression* call  = new CallExpression(var, params);
   call->SetLine(Globals::Get()->GetLineCnt());
   $$ = call;
  }

SCRIPT_ELEM:
  ASSERT { $$ = $1; } |
  SCRIPT_INVOKE {
   $$ = new WasmInvoke($1);
   $$->SetLine(Globals::Get()->GetLineCnt());
  }

MODULE:
  '('
  MODULE_TOKEN
  MODULE_ELEMS
  ')' {
    $$ = $3;
  }

MODULE_ELEMS:
  FUNCTION MODULE_ELEMS {
    WasmModule* module = $2;
    WasmFunction* f = $1;
    module->AddFunction(f);
    $$ = module;
  } |
  EXPORT MODULE_ELEMS {
    WasmModule* module = $2;
    WasmExport* e = $1;
    module->AddExport(e);
    $$ = module;
  } |
   '(' MEMORY INTEGER ')' MODULE_ELEMS {
    WasmModule* module = $5;
    module->AddMemory($3);
    $$ = module;
  } |
   '(' MEMORY INTEGER INTEGER ')' MODULE_ELEMS {
    WasmModule* module = $6;
    module->AddMemory($3, $4);
    $$ = module;
  } | {
    WasmModule* wm = new WasmModule();

    wm->SetLine(Globals::Get()->GetLineCnt());

    $$ = wm;
  }

EXPORT: '('
    EXPORT_TOKEN
    STRING
    VARIABLE
    ')' {
      // Handle name mangling.
      std::string s = $3;
      Variable* var = $4;

      WasmExport* exp = new WasmExport(s, var);
      $$ = exp;
    }

TYPE_LIST:
  TYPE TYPE_LIST {
    Local* local = $2;
    ETYPE type = $1;
    local->AddElem(type);
    $$ = local;
  } |
  { $$ = new Local(); }

LOCAL_ELEMS:
  TYPE TYPE_LIST {
    ETYPE type = $1;
    Local* local = $2;
    local->AddElem(type);
    $$ = local;
  } |
  IDENTIFIER TYPE {
    ETYPE type = $2;
    Local* local = new Local(type, $1);
    $$ = local;
  }

LOCAL:
  LOCAL_TOKEN
  LOCAL_ELEMS { $$ = $2; }

SIMPLE_FIELD:
   PARAM {
     Local* param = $1;
     $$ = new ParamField(param);
     } |
   RESULT {
     $$ = new ResultField($1);
     } |
   EXPRESSION_INNER{
     Expression* expression = $1;
     $$ = new ExpressionField(expression);
     } |
   LOCAL {
     Local* local = $1;
     $$ = new LocalField(local);
     }

FUNCTION_FIELD:
    '(' SIMPLE_FIELD ')' { $$ = $2; }

FUNCTION_FIELDS:
    FUNCTION_FIELD FUNCTION_FIELDS {
      std::list<FunctionField*>* list = static_cast<std::list<FunctionField*>* >($2);
      FunctionField* field = $1;
      list->push_front(field);
      $$ = list;
    }
    | /* Empty */ { $$ = new std::list<FunctionField*>(); }

IDENTIFIER_OR_NOT:
    IDENTIFIER {
      $$ = $1;
    } |
    /* Empty */
    { $$ = nullptr; }

FUNCTION: '('
    FUNCTION_TOKEN
    IDENTIFIER_OR_NOT
    FUNCTION_FIELDS
    ')' {
      WasmFunction* f = nullptr;

      // Handle name mangling.
      const char* id = $3;

      std::list<FunctionField*>* fields = static_cast<std::list<FunctionField*>* >($4);

      if (id != nullptr) {
        f = new WasmFunction(fields, id);
      } else {
        f = new WasmFunction(fields);
      }
      $$ = f;
    }

BINOP_OPER:
  LE { $$ = $1; } |
  LT { $$ = $1; } |
  GE { $$ = $1; } |
  GT { $$ = $1; } |
  NE { $$ = $1; } |
  EQ { $$ = $1; } |
  DIV { $$ = $1; } |
  ADD { $$ = $1; } |
  SUB { $$ = $1; } |
  MUL { $$ = $1; } |
  REM { $$ = $1; } |
  AND { $$ = $1; } |
  OR { $$ = $1; } |
  XOR { $$ = $1; } |
  SHL { $$ = $1; } |
  SHR { $$ = $1; } |
  MAX  { $$ = $1; } |
  MIN  { $$ = $1; } |
  COPYSIGN { $$ = $1; }

UNOP_OPER:
  CLZ { $$ = $1; } |
  CTZ { $$ = $1; } |
  POPCNT { $$ = $1; } |
  SQRT  { $$ = $1; } |
  CEIL  { $$ = $1; } |
  FLOOR  { $$ = $1; } |
  NEAREST  { $$ = $1; } |
  ABS  { $$ = $1; } |
  NEG  { $$ = $1; }

SIGN:
  's' { $$ = true; } |
  'u' { $$ = false; }

POTENTIAL_SIGNED_UNOP:
  UNOP_OPER { $$ = new Operation($1); } |
  UNOP_OPER '_' SIGN {
    $$ = new Operation($1, $3);
  }

POTENTIAL_SIGNED_BINOP:
  BINOP_OPER { $$ = new Operation($1); } |
  BINOP_OPER '_' SIGN {
    $$ = new Operation($1, $3);
  }

BINOP:
    TYPE '.' POTENTIAL_SIGNED_BINOP {
      Operation* op = $3;

      ETYPE type = $1;
      op->SetType(type);
      $$ = op;
    }

CONVERSION:
  WRAP { $$ = $1; } |
  EXTEND { $$ = $1; } |
  CONVERT { $$ = $1; } |
  DEMOTE { $$ = $1; } |
  PROMOTE { $$ = $1; } |
  REINTERPRET { $$ = $1; }

POTENTIAL_SIGNED_CONVERSION:
  CONVERSION { $$ = new ConversionOperation($1); } |
  CONVERSION '_' SIGN {
    $$ = new ConversionOperation($1, $3);
  }

POTENTIAL_SIGNED_TRUNC :
  TRUNC { $$ = new ConversionOperation($1); } |
  TRUNC '_' SIGN {
    $$ = new ConversionOperation($1, $3);
  }

UNOP:
    TYPE '.' POTENTIAL_SIGNED_UNOP {
      Operation* op = $3;
      ETYPE type = $1;
      op->SetType(type);
      $$ = op;
    } |
    TYPE '.' POTENTIAL_SIGNED_CONVERSION '/' TYPE {
      ConversionOperation* op = static_cast<ConversionOperation*> ($3);
      op->SetSrc($5);
      op->SetDest($1);
      $$ = op;
    } |
    TYPE '.' POTENTIAL_SIGNED_TRUNC '/' TYPE {
      ConversionOperation* op = static_cast<ConversionOperation*> ($3);
      op->SetSrc($5);
      op->SetDest($1);
      $$ = op;
    } |
    TYPE '.' POTENTIAL_SIGNED_TRUNC {
      ConversionOperation* op = static_cast<ConversionOperation*> ($3);
      // Just give the same source to destination types.
      op->SetSrc($1);
      op->SetDest($1);
      $$ = op;
    }

EXPRESSIONS:
  EXPRESSION EXPRESSIONS {
    std::list<Expression*>* list = static_cast<std::list<Expression*>* >($2);
    Expression* expr = $1;
    list->push_front(expr);
    $$ = list;
  }
  | /* Empty */ { $$ = new std::list<Expression*>(); }

VARIABLE: INTEGER {
    $$ = new Variable($1);
  } |
  IDENTIFIER {
    $$ = new Variable($1);
  }

EXPRESSION_OR_NOT:
  EXPRESSION { $$ = $1; }
  | { $$ = nullptr; }

CALL:
  CALL_TOKEN VARIABLE EXPRESSIONS {
    Variable* var = $2;
    std::list<Expression*>* list = static_cast<std::list<Expression*>* >($3);
    CallExpression* call = new CallExpression(var, list);

    call->SetLine(Globals::Get()->GetLineCnt());

    $$ = call;
  }

VALUE:
  FLOAT {
    $$ = new ValueHolder($1);
  } |
  INTEGER {
    $$ = new ValueHolder($1);
  }

EXPRESSION: '(' EXPRESSION_INNER ')' { $$ = $2; }

VARIABLE_OR_NOT:
  VARIABLE { $$ = $1; }
  | { $$ = nullptr; }

BREAK:
  BREAK_TOKEN {
    $$ = new BreakExpression();
  } |
  BREAK_TOKEN VARIABLE EXPRESSION_OR_NOT {
    Variable* var = $2;
    Expression* expr = $3;
    $$ = new BreakExpression(var, expr);
  }

BLOCK:
  BLOCK_TOKEN IDENTIFIER_OR_NOT EXPRESSIONS {
    std::list<Expression*>* list = static_cast<std::list<Expression*>* >($3);
    $$ = new BlockExpression($2, list);
  }

LOAD_POTENTIAL_SIZE:
  LOAD { $$ = new Load(); } |
  LOAD INTEGER { $$ = new Load($2); }

POTENTIAL_SIGNED_LOAD:
  LOAD_POTENTIAL_SIZE { $$ = $1; } |
  LOAD_POTENTIAL_SIZE '_' SIGN {
    Load* ld = $1;
    ld->SetSign($3);
    $$ = ld;
  }

STORE_POTENTIAL_SIZE:
  STORE { $$ = new Store(); } |
  STORE INTEGER { $$ = new Store($2); }

POTENTIAL_SIGNED_STORE:
  STORE_POTENTIAL_SIZE { $$ = $1; } |
  STORE_POTENTIAL_SIZE '_' SIGN {
    Store* st = $1;
    st->SetSign($3);
    $$ = st;
  }

MEMORY_OPERATION:
  TYPE '.' POTENTIAL_SIGNED_LOAD EXPRESSION {
    Load* ld = $3;
    ld->SetType($1);
    ld->SetAddress($4);

    // Size might need to get updated here.
    ld->UpdateSize();
    $$ = ld; } |
  TYPE '.' POTENTIAL_SIGNED_STORE EXPRESSION EXPRESSION {
    Store* st = $3;
    st->SetType($1);
    st->SetAddress($4);
    st->SetValue($5);

    // Size might need to get updated here.
    st->UpdateSize();
    $$ = st; }

EXPRESSION_INNER:
    BINOP EXPRESSION EXPRESSION {
      Operation* op = $1;
      Expression* left = $2;
      Expression* right = $3;
      Binop* binop = new Binop(op, left, right);
      $$ = binop;
      } |
    UNOP EXPRESSION {
      Operation* op = $1;
      Expression* only = $2;
      Unop* unop = new Unop(op, only);
      $$ = unop;
      } |
    TYPE '.' CONST VALUE {
      ETYPE type = $1;
      ValueHolder* value = $4;
      Const* const_expr = new Const(type, value);
      $$ = const_expr;
    } |
    GET_LOCAL VARIABLE {
      Variable* var = $2;
      GetLocal* get_local = new GetLocal(var);
      $$ = get_local;
    } |
    SET_LOCAL VARIABLE EXPRESSION {
      Variable* var = $2;
      Expression* value = $3;
      SetLocal* set_local = new SetLocal(var, value);
      $$ = set_local;
    } |
    IF_ELSE EXPRESSION EXPRESSION EXPRESSION {
      Expression* cond = $2;
      Expression* true_cond = $3;
      Expression* false_cond = $4;
      IfExpression* if_expression = new IfExpression(cond, true_cond, false_cond);
      $$ = if_expression;
    } |
    IF EXPRESSION EXPRESSION {
      Expression* cond = $2;
      Expression* true_cond = $3;
      IfExpression* if_expression = new IfExpression(cond, true_cond);
      $$ = if_expression;
    } |
    CALL {
      $$ = $1;
    } |
    UNREACHABLE_TOKEN {
      $$ = new Unreachable();
    } |
    LABEL VARIABLE_OR_NOT EXPRESSION {
      Variable* var = $2;
      Expression* expr = $3;
      LabelExpression* label = new LabelExpression(var, expr);
      $$ = label;
    } |
    SWITCH { $$ = $1; } |
    LOOP LOOP_NAMING EXPRESSIONS {
      LoopNaming* ln = $2;
      Variable* var = (ln != nullptr) ? ln->loop_name_ : nullptr;
      Variable* exit_name = (ln != nullptr) ? ln->exit_name_ : nullptr;

      std::list<Expression*>* list = static_cast<std::list<Expression*>*>($3);
      LoopExpression* loop = new LoopExpression(var, exit_name, list);
      $$ = loop;
    } |
    MEMORY_OPERATION { $$ = $1; } |
    BREAK { $$ = $1; } |
    BLOCK { $$ = $1; } |
    RETURN_TOKEN EXPRESSION {
      Expression* result = $2;
      ReturnExpression* return_expr = new ReturnExpression(result);
      $$ = return_expr;
    }

LOOP_NAMING:
  VARIABLE { $$ = new LoopNaming($1); } |
  VARIABLE VARIABLE { $$ = new LoopNaming($2, $1); } |
  { $$ = nullptr; }

PARAM:
   PARAM_TOKEN
   LOCAL_ELEMS {
       // For now, Parameters can be handled as if locals, let see if that holds.
       $$ = $2;
     }

RESULT: RESULT_TOKEN TYPE { $$ = $2; }

CASE_DEF:
  '(' CASE VARIABLE ')' {
    $$ = $3;
  }

LIST_CASES:
  CASE_DEF LIST_CASES {
    std::list<Variable*>* list = static_cast<std::list<Variable*>* >($2);
    list->push_front($1);
    $$ = list;
  } | {
    $$ = new std::list<Variable*>();
  }

CASE_TABLE: '(' TABLE LIST_CASES ')' {
    $$ = $3;
  }

CASES:
  ONE_CASE CASES {
    // TODO.
    CaseExpression* one_case = $1;
    std::list<CaseExpression*>* list = static_cast<std::list<CaseExpression*>*>($2);
    assert(list != nullptr);
    list->push_front(one_case);
    $$ = list;
  } | {
   $$ = new std::list<CaseExpression*>();
  }

ONE_CASE:
  '(' CASE IDENTIFIER EXPRESSION ')' {
    $$ = new CaseExpression($3, $4);
  }

SWITCH: TABLE_SWITCH IDENTIFIER_OR_NOT EXPRESSION
        CASE_TABLE CASE_DEF
        CASES {
          const char* name = $2;
          std::list<Variable*>* case_table = static_cast<std::list<Variable*>*>($4);
          std::list<CaseExpression*>* cases = static_cast<std::list<CaseExpression*>*>($6);
          $$ = new SwitchExpression($2, $3, case_table, $5, cases);
        }

ASSERT:
  ASSERT_RETURN {
    $$ = $1;
    $$->SetLine(Globals::Get()->GetLineCnt());
  } |
  ASSERT_TRAP {
    $$ = $1;
    $$->SetLine(Globals::Get()->GetLineCnt());
  } |
  ASSERT_RETURN_NAN {
    $$ = $1;
    $$->SetLine(Globals::Get()->GetLineCnt());
  } |
  ASSERT_INVALID {
    // We pass nothing here.
    $$ = nullptr;
  }

ASSERT_RETURN_NAN:
  '('
  ASSERT_RETURN_NAN_TOKEN
    SCRIPT_INVOKE
   ')' {
      // Create the call.
      CallExpression* call = $3;

      // Create the eq operation.
      Operation* operation = new Operation(EQ_OPER, false, VOID);

      // So suppose it is floating point and we will fix this later.
      ValueHolder* vh = new ValueHolder(std::numeric_limits<float>::quiet_NaN());

      Const* expr = new Const(FLOAT_32, vh);

      // Create the binop.
      Binop* binop = new Binop(operation, call, expr);

      // Now get the result ready, it's either -1 for no problem
      //   or the line number if there is a problem.
      vh = new ValueHolder(-1);
      Const* success = new Const(INT_32, vh);

      vh = new ValueHolder(Globals::Get()->GetLineCnt());
      Const* failure = new Const(INT_32, vh);

      IfExpression* if_expr = new IfExpression(binop, success, failure);

      // Finally, return that.
      ReturnExpression* return_expr = new ReturnExpression(if_expr);

      $$ = new WasmAssertReturnNan(return_expr);
    }

ASSERT_RETURN:
  '('
  ASSERT_RETURN_TOKEN
    SCRIPT_INVOKE
    EXPRESSIONS
  ')' {
    // Let's just create the IR that calls and compares the call and the expected result.
    std::list<Expression*>* results = static_cast<std::list<Expression*>* >($4);

    // TODO: handle multiple returns.
    assert(results->size() <= 1);

    // Get the call.
    CallExpression* call = $3;

    if (results->size() > 0) {
      // Now get the result, we assume only 1.
      Expression* expr = results->back();

      // Create the eq operation.
      Operation* operation = new Operation(EQ_OPER, false);

      // Create the binop.
      Binop* binop = new Binop(operation, call, expr);

      // Now get the result ready, it's either -1 for no problem
      //   or the line number if there is a problem.
      ValueHolder* vh = new ValueHolder(-1);
      Const* success = new Const(INT_32, vh);

      vh = new ValueHolder(Globals::Get()->GetLineCnt());
      Const* failure = new Const(INT_32, vh);

      IfExpression* if_expr = new IfExpression(binop, success, failure);

      // Finally, return that.
      ReturnExpression* return_expr = new ReturnExpression(if_expr);

      $$ = new WasmAssertReturn(return_expr);
    } else {
      // No return but we want to call it so.
      std::list<Expression*>* list = new std::list<Expression*>();
      list->push_back(call);

      // Then return -1: no problem.
      ValueHolder* vh = new ValueHolder(-1);
      Const* success = new Const(INT_32, vh);
      list->push_back(success);

      BlockExpression* block = new BlockExpression(nullptr, list);

      $$ = new WasmAssertReturn(block);
    }
  }

ASSERT_TRAP:
  '('
  ASSERT_TRAP_TOKEN
    SCRIPT_INVOKE STRING
  ')' {
    // Trap is a bit more complex: call the wrapper that we have to ensure it "traps".
    //  We want to do:
    //    Call the trapping call.
    //    Return the pointer to the string (should not be reached).
    char* error_msg = $4;

    std::list<Expression*>* list = new std::list<Expression*>();

    // Get the call that will trap.
    CallExpression* call = $3;

    list->push_back(call);

    // Create a string expression and push the return of it.
    StringExpression* string_expr = new StringExpression(error_msg);
    list->push_back(string_expr);

    // Create a block with the instructions.
    BlockExpression* block = new BlockExpression(nullptr, list);

    // And create the trap with memory of the message.
    $$ = new WasmAssertTrap(block);
  }

ASSERT_INVALID:
  '('
  ASSERT_INVALID_TOKEN
  MODULE
  STRING
  ')' {
    $$ = nullptr;
  }

%%

int yyerror (const std::string& s) {
  PrintLine(Globals::Get()->GetLineCnt());
  return 0;
}
